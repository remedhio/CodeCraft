@use 'sass:math';
@use './variables' as *;

// REMを計算する
/// @param {数字 単位無し} $size
///    REMに変更したい数字
/// @return {数字}
///    REMの変更されたサイズ
@function pcrem($size, $fz: $fz-pc) { // デフォルト値を引数として設定
  $rem-size: math.div($size, $fz);
  @return #{$rem-size}rem;
}
@function sprem($size, $fz: $fz-sp) { // デフォルト値を設定
  $rem-size: math.div($size, $fz);
  @return #{$rem-size}rem;
}

// Z-indexのmapからz-indexを呼び出す
/// @param {文字列} $key
///    _variables.scssの$z-indexマップに入っている値
/// @return {マップの値}（これはmixinのほうがいい？）
@function z($key) {
  @return map-get($z-index, $key);
}

//パーセントを計算する。デフォルトで単位はないけど、3つ目の因数で入力でいる
/// @param {数字} $input1
///  パーセント計算の分子
/// @param {数字} $input2
/// パーセント計算の分母
/// @param {文字列} $unit
/// 任意の単位
@function perc($input1, $input2, $unit) {
  @if $unit == '%' {
    @return math.div($input1, $input2) * 100%;
  } @else if $unit == vw {
    @return math.div($input1, $input2) * 100vw;
  } @else {
    @return math.div($input1, $input2) + $unit;
  }
}

// 指定pxからvwを計算
/// vw計算する数値(px)
/// @param {数字 単位無し} $size
/// @return {数字}vw
@function vw($size) {
  $vw-size: math.div($size, math.div($wid-pc, 100));
  @return #{$vw-size}vw;
}
@function spvw($size) {
  $vw-size: math.div($size, math.div($wid-sp, 100));
  @return #{$vw-size}vw;
}

// フォントサイズ最小値計算
/// フォントサイズ24px以下はこの関数を使うと指定サイズ-2pxが最小サイズになる
/// @param {数字 単位無し} $size
/// 計算したいフォントサイズ
/// @return {数字}
/// 計算されたREMサイズ
@function calc-fz($size) {
  @if $size <= 24 {
    @return max($size - 2px, pcrem($size));
  }
  @else {
    @return pcrem($size);
  }
}

// clamp計算
/// 指定した可変幅で可変させる
/// @param {数字 単位無し} $size
/// 可変させたいフォントサイズ
/// @param {数字 単位無し} $wid-var
/// 指定する可変幅
/// @return {数字}
/// clamp
@function calc-clamp($size, $wid-var) {
  $px-size: math.div($size, $wid-pc) * $wid-var * 1px;
  $vw-size: vw($size);
  $rem-size: pcrem($size);
  @return clamp(#{$px-size}, #{$vw-size}, #{$rem-size});
}


@function fz($min, $max, $min-view-port: 414, $max-view-port: 1920) {
  $variable-part: calc(($max - $min) / ($max-view-port - $min-view-port));
  $constant: calc(($max - $max-view-port * $variable-part) / 16);
  $min-rem: calc($min / 16 * 1rem);
  $max-rem: calc($max / 16 * 1rem);
  $variable-rem: calc($constant * 1rem);
  $variable-vw: calc(100 * $variable-part * 1vw);

  @return clamp($min-rem, $variable-rem + $variable-vw, $max-rem);
}
